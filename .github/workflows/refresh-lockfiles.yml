# This workflow periodically creates new environment lock files based on the newest
# available packages and dependencies.
#
# Environment specifications are given as conda environment.yml files found in
# `requirements/ci/py**.yml`.  These state the packages required, the conda channels
# that the packages will be pulled from, and any versions of packages that need to be
# pinned at specific versions.
#
# For environments that have changed, a pull request will be made and submitted
# to the main branch

name: Refresh Lockfiles


on:
  workflow_dispatch:
  schedule:
    # Run once a week on a Saturday night 
    # N.B. "should" be quoted, according to
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onschedule
    - cron: "1 0 * * 6"


jobs:

  get_python_matrix:
    # Determines which Python versions should be included in the matrix used in
    # the gen_lockfiles job.
    if: "github.repository == 'SciTools/iris'"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get_py.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: get_py
        run: echo "::set-output name=matrix::$(ls -1 requirements/ci/py??.yml | xargs -n1 basename | sed 's/....$//' | jq -cnR '[inputs]')"

  gen_lockfiles:
    # this is a matrix job: it splits to create new lockfiles for each
    # of the CI test python versions.
    if: "github.repository == 'SciTools/iris'"
    runs-on: ubuntu-latest
    needs: get_python_matrix
    
    strategy:
      matrix:
        python: ${{ fromJSON(needs.get_python_matrix.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v3
      - name: install conda-lock
        run: |
          source $CONDA/bin/activate base
          conda install -y -c conda-forge conda-lock
      - name: generate lockfile
        run: |
          $CONDA/bin/conda-lock lock -k explicit -p linux-64 -f requirements/ci/${{matrix.python}}.yml
          mv conda-linux-64.lock ${{matrix.python}}-linux-64.lock
      - name: output lockfile
        uses: actions/upload-artifact@v3
        with:
          path: ${{matrix.python}}-linux-64.lock
    
  create_pr:
    # once the matrix job has completed all the lock files will have been uploaded as artifacts.
    # Download the artifacts, add them to the repo, and create a PR.
    if: "github.repository == 'SciTools/iris'"
    runs-on: ubuntu-latest
    needs: gen_lockfiles
    
    steps:
      - uses: actions/checkout@v3
      - name: get artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
          
      - name: Update lock files in repo
        run: |
          cp artifacts/artifact/*.lock requirements/ci/nox.lock
          rm -r artifacts
        
      - name: Create Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@d7db273d6c7206ba99224e659c982ae34a1025e3
        with:
          commit-message: Updated environment lockfiles
          committer: "Lockfile bot <noreply@github.com>"
          author: "Lockfile bot <noreply@github.com>"
          delete-branch: true
          branch: auto-update-lockfiles
          title: "[iris.ci] environment lockfiles auto-update"
          body: |
            Lockfiles updated to the latest resolvable environment.

            If the CI test suite fails, create a new branch based of this pull request and add the required fixes to that branch.
          labels: |
            New: Pull Request
            Bot

      - name: Check Pull Request
        if: steps.cpr.outputs.pull-request-number != ''
        run: |
          echo "pull-request #${{ steps.cpr.outputs.pull-request-number }}"
          echo "pull-request URL ${{ steps.cpr.outputs.pull-request-url }}"
          echo "pull-request operation [${{ steps.cpr.outputs.pull-request-operation }}]"
          echo "pull-request head SHA ${{ steps.cpr.outputs.pull-request-head-sha }}"
